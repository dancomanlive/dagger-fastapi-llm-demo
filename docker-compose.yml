version: '3.8'
services:
  fastapi:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      # Commenting out Dagger-related volumes
      # - dagger-socket:/run/dagger
      - /var/run/docker.sock:/var/run/docker.sock
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    environment:
      # Commenting out Dagger-related environment variables
      # - _EXPERIMENTAL_DAGGER_RUNNER_HOST=unix:///run/dagger/engine.sock
      - OPENAI_BASE_URL=https://api.openai.com/v1 # OpenAI API endpoint
      - OPENAI_API_KEY=${OPENAI_API_KEY} # Loaded from .env
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_HOST=http://host.docker.internal:6333
      - PYTHONPATH=/app
      - RETRIEVER_SERVICE_URL=http://retriever-service:8000
      - RETRIEVER_SERVICE_URL_FOR_HOST=http://localhost:8001
      - EMBEDDING_SERVICE_URL=http://embedding-service:8000
      - EMBEDDING_SERVICE_URL_FOR_HOST=http://localhost:8002
      # - RETRIEVER_SERVICE_URL_FOR_DAGGER=http://host.docker.internal:8001 # No longer needed
      - ENABLE_STARTUP_WARMUP=false
    env_file:
      - .env
    depends_on:
      # Removing Dagger engine dependency
      - qdrant
      - retriever-service
      - embedding-service
    networks:
      - dagger-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8000/"]
      interval: 10s
      timeout: 5s
      retries: 3

  gradio-chat:
    build:
      context: ./services/gradio_service
    ports:
      - "7860:7860"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FASTAPI_SERVICE_URL=http://fastapi:8000
      - RETRIEVER_SERVICE_URL=http://retriever-service:8000
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    depends_on:
      - fastapi
      - retriever-service
      - qdrant
    networks:
      - dagger-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:7860/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Commenting out Dagger engine service - no longer needed
  # dagger-engine:
  #   image: registry.dagger.io/engine:v0.18.8 # Match Dagger SDK version
  #   container_name: dagger-engine
  #   privileged: true
  #   ports:
  #     - "8080:8080" # Expose Dagger Engine API
  #   volumes:
  #     - dagger-socket:/run/dagger
  #   networks:
  #     - dagger-net
  #   environment:
  #     - DAGGER_LOG_LEVEL=debug

  retriever-service:
    build:
      context: ./services/retriever_service
      args:
        EMBEDDING_MODEL_ARG: "sentence-transformers/all-MiniLM-L6-v2"
    ports:
      - "8001:8000"
    environment:
      - QDRANT_HOST_FOR_SERVICE=http://qdrant:6333
      - QDRANT_API_KEY=${QDRANT_API_KEY:-}
    depends_on:
      - qdrant
    restart: unless-stopped
    networks:
      - dagger-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8000/"]
      interval: 10s
      timeout: 5s
      retries: 3

  embedding-service:
    build:
      context: ./services/embedding_service
    ports:
      - "8002:8000"
    environment:
      - QDRANT_HOST_FOR_SERVICE=http://qdrant:6333
      - QDRANT_API_KEY=${QDRANT_API_KEY:-}
      - EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
    depends_on:
      - qdrant
    restart: unless-stopped
    networks:
      - dagger-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8000/"]
      interval: 10s
      timeout: 5s
      retries: 3

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - dagger-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:6333/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Temporal Server
  temporal:
    image: temporalio/auto-setup:1.24
    ports:
      - "7233:7233"
      - "8080:8080"  # Temporal Web UI
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
    depends_on:
      - postgresql
    networks:
      - dagger-net

  # PostgreSQL for Temporal
  postgresql:
    image: postgres:13
    environment:
      - POSTGRES_USER=temporal
      - POSTGRES_PASSWORD=temporal
      - POSTGRES_DB=temporal
    ports:
      - "5432:5432"
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    networks:
      - dagger-net

  # Temporal Web UI
  temporal-ui:
    image: temporalio/ui:2.28.0
    ports:
      - "8081:8080"
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:8081
    depends_on:
      - temporal
    networks:
      - dagger-net

  # Temporal Worker Service
  temporal-worker:
    build:
      context: ./services/temporal_service
    environment:
      - TEMPORAL_HOST=temporal:7233
      - TEMPORAL_NAMESPACE=default
      - TEMPORAL_TASK_QUEUE=document-processing-queue
      - EMBEDDING_SERVICE_URL=http://embedding-service:8000
    depends_on:
      - temporal
      - embedding-service
    networks:
      - dagger-net
    restart: unless-stopped

  # Temporal API Service
  temporal-api:
    build:
      context: ./services/temporal_service
    ports:
      - "8003:8000"
    environment:
      - TEMPORAL_HOST=temporal:7233
      - TEMPORAL_NAMESPACE=default
      - TEMPORAL_TASK_QUEUE=document-processing-queue
      - EMBEDDING_SERVICE_URL=http://embedding-service:8000
    depends_on:
      - temporal
      - embedding-service
    networks:
      - dagger-net
    restart: unless-stopped
    command: ["python", "api.py"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  # dagger-socket: # Commented out as no longer needed
  qdrant-data:
  temporal-data:
  postgresql-data:

networks:
  dagger-net:
    driver: bridge