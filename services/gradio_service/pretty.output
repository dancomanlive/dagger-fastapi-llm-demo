Feature: Gradio service Temporal integration # features/gradio_temporal_integration.feature:1
  As a user of the RAG system
  I want the Gradio interface to use Temporal workflows for document retrieval
  So that all services are properly orchestrated through Temporal
  Background:   # features/gradio_temporal_integration.feature:6

  Scenario: User queries through Gradio interface using Temporal     # features/gradio_temporal_integration.feature:11
    Given the Temporal server is running                             # features/steps/gradio_temporal_steps.py:21
    And the RetrievalWorkflow is registered                          # features/steps/gradio_temporal_steps.py:27
    And the gradio service is configured to use Temporal             # features/steps/gradio_temporal_steps.py:39
    Given a user opens the Gradio chat interface                     # features/steps/gradio_temporal_steps.py:48
    When the user submits a query "What is artificial intelligence?" # features/steps/gradio_temporal_steps.py:76
    And selects collection "document_chunks"                         # features/steps/gradio_temporal_steps.py:83
    Then the gradio service should start a RetrievalWorkflow         # features/steps/gradio_temporal_steps.py:115
    And the workflow should retrieve relevant document contexts      # features/steps/gradio_temporal_steps.py:150
    And the OpenAI response should include context from the workflow # features/steps/gradio_temporal_steps.py:158
    And no HTTP calls should be made to retriever service            # features/steps/gradio_temporal_steps.py:182

  Scenario: Gradio handles Temporal workflow failures gracefully  # features/gradio_temporal_integration.feature:20
    Given the Temporal server is running                          # features/steps/gradio_temporal_steps.py:21
    And the RetrievalWorkflow is registered                       # features/steps/gradio_temporal_steps.py:27
    And the gradio service is configured to use Temporal          # features/steps/gradio_temporal_steps.py:39
    Given the Temporal workflow fails during retrieval            # features/steps/gradio_temporal_steps.py:54
    When a user submits a query through Gradio                    # features/steps/gradio_temporal_steps.py:100
    Then the gradio service should return an error message        # features/steps/gradio_temporal_steps.py:190
    And the chat interface should remain functional               # features/steps/gradio_temporal_steps.py:207
    And the user should be notified of the retrieval error        # features/steps/gradio_temporal_steps.py:215

  Scenario: Multiple users can query simultaneously through Temporal  # features/gradio_temporal_integration.feature:27
    Given the Temporal server is running                              # features/steps/gradio_temporal_steps.py:21
    And the RetrievalWorkflow is registered                           # features/steps/gradio_temporal_steps.py:27
    And the gradio service is configured to use Temporal              # features/steps/gradio_temporal_steps.py:39
    Given multiple users are using the Gradio interface               # features/steps/gradio_temporal_steps.py:60
    When each user submits different queries                          # features/steps/gradio_temporal_steps.py:89
    Then each query should start its own RetrievalWorkflow            # features/steps/gradio_temporal_steps.py:223
    And all workflows should execute independently                    # features/steps/gradio_temporal_steps.py:250
    And each user should receive their own contextual response        # features/steps/gradio_temporal_steps.py:258

  Scenario: Gradio workflow integration with different collections               # features/gradio_temporal_integration.feature:34
    Given the Temporal server is running                                         # features/steps/gradio_temporal_steps.py:21
    And the RetrievalWorkflow is registered                                      # features/steps/gradio_temporal_steps.py:27
    And the gradio service is configured to use Temporal                         # features/steps/gradio_temporal_steps.py:39
    Given documents are stored in multiple collections                           # features/steps/gradio_temporal_steps.py:70
    When a user selects collection "default" and queries "machine learning"      # features/steps/gradio_temporal_steps.py:107
    Then the RetrievalWorkflow should search in the "default" collection         # features/steps/gradio_temporal_steps.py:266
    When a user selects collection "document_chunks" and queries "AI ethics"     # features/steps/gradio_temporal_steps.py:107
    Then the RetrievalWorkflow should search in the "document_chunks" collection # features/steps/gradio_temporal_steps.py:266

  Scenario: Complete RAG pipeline with OpenAI integration                         # features/gradio_temporal_integration.feature:41
    Given the Temporal server is running                                          # features/steps/gradio_temporal_steps.py:21
    And the RetrievalWorkflow is registered                                       # features/steps/gradio_temporal_steps.py:27
    And the gradio service is configured to use Temporal                          # features/steps/gradio_temporal_steps.py:39
    Given the Temporal server is running                                          # features/steps/gradio_temporal_steps.py:21
    And the RetrievalWorkflow is registered                                       # features/steps/gradio_temporal_steps.py:27
    And the OpenAI API is available                                               # features/steps/gradio_temporal_steps.py:33
    When a user submits a query "What is artificial intelligence?" through Gradio # features/steps/gradio_temporal_steps.py:290
    And the Temporal workflow provides relevant context                           # features/steps/gradio_temporal_steps.py:297
    Then OpenAI should receive the workflow context in the system prompt          # features/steps/gradio_temporal_steps.py:304
    And generate a response using that context                                    # features/steps/gradio_temporal_steps.py:349
    And the user should see the contextual AI response                            # features/steps/gradio_temporal_steps.py:356
    And the debug panel should show the retrieved documents                       # features/steps/gradio_temporal_steps.py:363

